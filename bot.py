import telebot
from telebot import types

from config import token, admin_ids, channel_id, admin_chat_id

bot = telebot.TeleBot(token)

admin_ids = admin_ids
admin_chat_id = admin_chat_id

channel_id = channel_id  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

user_messages = []  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
pending_messages = {}
# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
autoposting_enabled = False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.from_user.id in admin_ids:
        btn1 = types.KeyboardButton('üí´ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üí´')
        markup.add(btn1)
        bot.send_message(message.chat.id, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=markup)
    else:
        btn1 = types.KeyboardButton('üëÄ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é')
        btn2 = types.KeyboardButton('‚òéÔ∏è –ü–æ–º–æ—â—å')
        btn3 = types.KeyboardButton('ü•ñ –î–æ–Ω–∞—Ç –Ω–∞ –ø–∏—Ä–æ–∂–æ–∫')
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç", reply_markup=markup)

# –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(func=lambda message: True)
def handle_user(message):
    # print(pending_messages)
    # print("Received text message:", message.text)
    if message.from_user.id in admin_ids:
        handle_admin(message)
    else:
        # print(message.text)
        if message.text == 'üëÄ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é':
            bot.send_message(message.chat.id, "–ü—Ä–µ–¥–ª–æ–∂–∏ —Å–≤–æ–π –ø–æ—Å—Ç, –µ—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ–¥–æ–±—Ä–∏—Ç –µ–≥–æ, –µ–≥–æ –æ—Ç–ø—Ä–∞–≤—è—Ç –≤ –∫–∞–Ω–∞–ª:)")
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
            pending_messages[message.chat.id] = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç'

        elif message.text == '‚òéÔ∏è –ü–æ–º–æ—â—å':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('‚ùì –ö–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é')
            btn2 = types.KeyboardButton('ü•¥ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ —è –∑–∞–±–∞–Ω–µ–Ω')
            btn3 = types.KeyboardButton('ü§ù –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å')
            btn4 = types.KeyboardButton('–í—ã—Ö–æ–¥')
            markup.add(btn1, btn2, btn3, btn4)
            bot.send_message(message.chat.id, "–ü–æ–º–æ—â—å", reply_markup=markup)

        elif message.text == '‚ùì –ö–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é':
            bot.send_message(message.chat.id, "–ö–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é: —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é, –∑–∞–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞, —Å–Ω–∏–∑—É –ø–æ—è–≤—è—Ç—Å—è –¥–≤–µ –∫–Ω–æ–ø–∫–∏, –æ–¥–Ω–∞ –∏–∑ –Ω–∏—Ö –±—É–¥–µ—Ç '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é'. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–µ –∏ –ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ª–æ–∂–∏–º :)")

        elif message.text == 'ü•¥ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ —è –∑–∞–±–∞–Ω–µ–Ω':
            bot.send_message(message.chat.id, "–ï—Å–ª–∏ –≤—ã –∑–∞–±–∞–Ω–µ–Ω—ã, –Ω–∏—á–µ–≥–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ–ª—å–∑—è, —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–∞—Ä—É—à–∏–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ –∫–∞–Ω–∞–ª–∞!")

        elif message.text == 'ü§ù –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å':
            bot.send_message(message.chat.id, "–í –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤—Ç–æ—Ä—É—é —Å—Å—ã–ª–∫—É –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º –±–æ—Ç–µ.")

        elif message.text == '–í—ã—Ö–æ–¥':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('üëÄ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é')
            btn2 = types.KeyboardButton('‚òéÔ∏è –ü–æ–º–æ—â—å')
            markup.add(btn1, btn2)
            bot.send_message(message.chat.id, "–í—ã—Ö–æ–¥", reply_markup=markup)

        elif message.text == 'ü•ñ –î–æ–Ω–∞—Ç –Ω–∞ –ø–∏—Ä–æ–∂–æ–∫':
            bot.send_message(message.chat.id, "–î–æ–Ω–∞—Ç –Ω–∞ –ø–∏—Ä–æ–∂–æ–∫ –¥–ª—è –ø–æ—Ç–¥–µ—Ä–∂–∫–∏ –∞–¥–º–∏–∏–Ω–∞ –º–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç—É —Å–±–µ—Ä")
            bot.send_message(message.chat.id, "–° —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
            bot.send_message(message.chat.id, "2202 2009 6688 8685")

        # elif message.text == '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç':
        elif pending_messages.get(message.chat.id) == '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç':
            # print(pending_messages)
            if autoposting_enabled:
                # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥, –ø—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
                bot.send_message(channel_id, message.text)
                bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ.")
                bot.send_message(message.chat.id, "–í—ã—Ö–æ–¥.")

                pending_messages.pop(message.chat.id, None)
            else:
                user_messages.append({
                    'id': message.from_user.id,
                    'name': message.from_user.username,
                    'text': message.text
                })
                bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
                bot.send_message(message.chat.id, "–í—ã—Ö–æ–¥.")


        else:
            bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ üëÄ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é")
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")



@bot.message_handler(func=lambda message: message.from_user.id in admin_ids)
def handle_admin(message):
    global autoposting_enabled
    # print(autoposting_enabled)
    if message.text == 'üí´ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üí´':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('üë©‚Äçüé§ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥')
        btn2 = types.KeyboardButton('üë©‚Äçüîß –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π-–º–æ–¥')

        btn3 = types.KeyboardButton('–í—ã—Ö–æ–¥')
        btn4 = types.KeyboardButton('üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        markup.add(btn1, btn2, btn3, btn4)
        bot.send_message(message.chat.id, "–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å?", reply_markup=markup)
        if autoposting_enabled:
            bot.send_message(message.chat.id, "–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π-–º–æ–¥ –≤–∫–ª—é—á–µ–Ω ", reply_markup=markup)

    elif message.text == 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
        view_admin_messages(message)

    elif message.text == 'üë©‚Äçüé§ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥':
        autoposting_enabled = True
        bot.send_message(message.chat.id, "–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω")

    elif message.text == 'üë©‚Äçüîß –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π-–º–æ–¥':
        autoposting_enabled = False
        bot.send_message(message.chat.id, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π-–º–æ–¥ –≤–∫–ª—é—á–µ–Ω")

    elif message.text == '–í—ã—Ö–æ–¥':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('üí´ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üí´')
        markup.add(btn1)
        bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=markup)

def view_admin_messages(message):
    if user_messages:
        for user_message in user_messages:
            markup = types.InlineKeyboardMarkup()

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
            # btn_block = types.InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_{user_message['id']}")
            # markup.row(btn_block)
            bot.send_message(
                message.chat.id,
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user_message['name']} :\n{user_message['text']}",
                reply_markup=markup
            )

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
            markup = types.InlineKeyboardMarkup()
            btn_publish = types.InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_{user_message['id']}")
            btn_cancel = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{user_message['id']}")
            markup.row(btn_publish, btn_cancel)
            bot.send_message(
                message.chat.id,
                user_message['text'],
                reply_markup=markup
            )

    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")


@bot.callback_query_handler(func=lambda call: True)
def handle_inline_buttons(call):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    action, user_id = call.data.split('_') # cancel –∏ id-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_text = call.message.text  # —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


    if action == "block":
        pass
    elif action == "publish":
        bot.send_message(channel_id, user_text)

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)

        prev_user_message = next(
            (msg for msg in user_messages if msg.get('id') == int(user_id) and msg.get('text') == user_text), None)
        if prev_user_message:
            user_messages.remove(prev_user_message)

        bot.send_message(call.message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    elif action == "cancel":
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)

        prev_user_message = next(
            (msg for msg in user_messages if msg.get('id') == int(user_id) and msg.get('text') == user_text), None)
        if prev_user_message:
            user_messages.remove(prev_user_message)

        bot.send_message(call.message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")


if __name__ == '__main__':
    bot.delete_webhook()
    bot.polling(none_stop=True)
